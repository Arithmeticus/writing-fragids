<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.1/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.1/sch/docbook.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<article xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1">
    <info>
        <title>TEI Akita</title>
        <legalnotice>
            <info>
                <copyright>
                    <year>2021</year>
                    <year/>
                    <holder>Joel Kalvesmaki</holder>
                </copyright>
                <author>
                    <personname><firstname>Joel</firstname>
                        <surname>Kalvesmaki</surname></personname>
                </author>
            </info>
            <remark>This document is released under a Creative Commons Attribution 4.0 International
                License: <link xlink:href="http://creativecommons.org/licenses/by/4.0/"
                    >http://creativecommons.org/licenses/by/4.0/</link>
            </remark>
        </legalnotice>
        <revhistory>
            <revision>
                <date>2021-11-16</date>
                <revdescription>
                    <para>Prepublication draft, version 0.03</para>
                </revdescription>
            </revision>
        </revhistory>
    </info>
    <section>
        <title>Introduction</title>
        <para>TEI Akita allows someone editing a Text Encoding Initiative XML file to specify how
            the file conforms to the specifications for Writing Fragment Identifiers (Writing
            Fragids, or WFs). WFs are fragments added to URIs to point to specific parts of
            writings. By making a TEI file WF-conformant, you are opening it up to Semantic Web
            applications. Many WF URIs come in the context of RDF triples that make assertions about
            texts. An application can take a WF URI and a TEI Akita file, look for a match, and
            return any corresponding content.</para>
        <para>A great strength of TEI is that it is flexible, enabling scholars to encoding anything
            they like. That is also its great weakness. We structure our texts the way we see fit,
            and seldom do two TEI files from different projects look much alike, even when treating
            the same text. Akita specifications can explain how to make a TEI file WF-conformant,
            but it cannot dictate how any extracted content should be interpreted or handled by a
            WF-conformant processor or its user, or how to align it with other TEI Akita files for
            the same URI.</para>
        <para>For TEI file creators, the heart of TEI Akita is a Schematron epischema that can be
            added to any standard TEI file. That Schematron file checks to see if everything needed
            for WF-conformance is in place, and through Schematron Quick Fixes, offers suggestions
            on improvements.</para>
        <para>For developers, the heart of TEI Akita is an XSLT 3.0 file, akita-core.xsl, which
            parses any TEI Akita file into subtrees and resolves vocabulary. Together, the subtree
            map and vocabulary can be used to process a matching WF URI.</para>
        <para><emphasis role="bold">About the name</emphasis>: One possible pronunciation of WF is
            "woof," which evokes dogs. Akita is one of the oldest known dog breeds, and this is one
            of the first attempts to provide WF-conformance for TEI.</para>
    </section>
    <section>
        <title>TEI Design and WF Conformance</title>
        <section>
            <title>Metadata</title>
            <para>The <code>teiHeader</code> is something of the wild west for metadata. It can be
                used to describe just about anything. Most of the elements have been designed for
                humans writing metadata for other humans, and most of it is optional. That relaxed
                position on metadata is at odds with the WF specifications, which require URI-based
                declarations of works, scripta, and reference systems. Therefore
                    <code>teiHeader</code>, out of the box, cannot be relied upon as a mechanism for
                handling some WF options (e.g., resolving URI synonymity).</para>
            <para>For a TEI file to be WF-conformant, some important metadata about the data needs
                to be declared:<orderedlist>
                    <listitem>
                        <para>One or more URIs specifying which work-version are to be found where
                            in the <code>body</code>.</para>
                    </listitem>
                    <listitem>
                        <para>One or more URIs specifying which scripta have been followed where for
                            the transcription in the <code>body</code>.</para>
                    </listitem>
                    <listitem>
                        <para>One or more URIs specifying which scripta have been followed where for
                            the reference system in the <code>body</code>. Differentiation must be
                            made between a reference system that is already based upon a subset of
                            the existing hierarchy and an anchor-based system reliant upon
                                <code>milestone</code>, <code>pb</code>, <code>cb</code>,
                            etc.</para>
                    </listitem>
                </orderedlist>The types of TEI metadata models differ so greatly one from another,
                that it cannot be predicted where one should find such metadata. Because TEI Akita
                is designed for a variety of TEI files, including customized ones, a special
                apparatus is needed to express such metadata (see below).</para>
        </section>
        <section>
            <title>Text</title>
            <para>For a TEI file to have its content exposed to WF URIs, the text needs to be
                organized in at least one (nonexclusive) integer-based reference system. There must
                be a mechanism, as well, that allows a user to allocate the text into the different
                possible combinations of reference system, work, and scriptum.</para>
            <para>TEI provides two primary ways of building a reference system: by an existing
                hierarchy or by anchors (e.g., <code>&lt;milestone></code>, <code>&lt;pb></code>,
                    <code>&lt;lb></code>).</para>
            <section>
                <title>Reference systems by existing hierarchy</title>
                <para>The primary, default reference system in TEI is through an existing hierarchy
                    or tree fragment. Quite often that hierarchy is rooted in
                    <code>&lt;text></code>, and the reference system consists of the tiers of
                        <code>@n</code> in the tree.</para>
                <para>In this structure, the user is assumed to have been consistent in using
                        <code>@n</code> exclusively for references. Excluded are <code>@n</code>
                    values of any anchor elements (e.g., empty elements, or elements that do not
                    contain relevant text; see next section).</para>
                <para>It is up to the TEI user to ensure consistency in placement and relationships
                    of elements with <code>@n</code>. That is, there may be elements with
                        <code>@n</code> that are within the same text unit sequence, but some might
                    be excluded. The reference system and its steps are determined not by the entire
                    TEI tree structure but only by those elements that have <code>@n</code>.</para>
                <para>According to the WF specifications, any part of a tree that is not in a unique
                    ordered reference system is ignored, because it is not accessible to a WF URI.
                    Therefore only <code>@n</code>s that take a single positive integer (or an
                    integer-modified integer) will be treated as part of the reference system. If
                    two <code>@n</code>s in the same text unit sequence share the same integer, they
                    will be treated as components of the same reference unit. Any element with an
                        <code>@n</code> with a non-integer value will be ignored.</para>
            </section>
            <section>
                <title>Reference systems by anchor</title>
                <para>A reference system that depends upon anchors in TEI such as
                        <code>&lt;milestone></code>, <code>&lt;pb></code>, and <code>&lt;lb></code>
                    brings greater challenges than the more common hierarchical one. Anchors must be
                    organized by type, and the relationships between different types of anchors must
                    be defined. For a given reference system, what anchor types are involved? What
                    is the depth of a given anchor type in the reference system? Does an anchor type
                    rely upon logical or material units? What is the scope of a given anchor? Does
                    it end just before the next anchor in the series, or earlier? Further, anchor
                    types may be inconsistently used or placed. Errors are difficult to spot, and
                    validation routines are challenging to write.</para>
                <para>In most cases, TEI anchors express relatively simple sequence of references
                    that are alternatives to the main hierarchical reference system. Those are the
                    target cases accommodated in TEI Akita.</para>
                <para>A <code>&lt;milestone></code> may be part of either a material or logical
                    reference system. But every <code>&lt;pb></code>, <code>&lt;cb></code>, and
                        <code>&lt;lb></code> represents a division within a material reference
                    system, not logical. It is an error for any reference system declared as being
                    logical to have as a member any <code>&lt;pb></code>, <code>&lt;cb></code>, or
                        <code>&lt;lb></code> .</para>
                <para>Anchors need to be explicitly associated with other members of the same
                    division sequence. This must be done through <code>@type</code>. Doing so allows
                    for different explicit reference system layers in the same document (e.g., a
                    text keyed to the folio + line numbers of multiple manuscripts).</para>
                <para>An anchor specifies where a particular text begins, but no provision is made
                    for where it should end. Perhaps such support will be provided in a later
                    version.</para>
            </section>
        </section>
    </section>
    <section>
        <title>Akita Specifications</title>
        <para>TEI Akita files are defined as those TEI files that are valid against the official
            schema, <link xlink:href="../schemas/akita.sch">../schemas/akita.sch</link>. That
            Schematron file checks to see if all the necessary Akita apparatus are present, and if
            there are any obvious contradictions or errors.</para>
        <para>Akita files require two sets of apparatus: vocabulary and declarations. You may find
            it helpful to read this section in conjunction with an <link
                xlink:href="../examples/tei%20akita%20example.xml">example</link>.</para>
        <section>
            <title>Vocabulary Declarations</title>
            <para>Akita vocabulary is declared through three types of processing instructions (PI),
                which may be placed anywhere in the TEI document. The three types are identified by
                the name of the PI:<itemizedlist>
                    <listitem>
                        <para><code>akita-work</code>: Lists possible IRI values for a single work.
                            This processing instruction starts with an identifier then a series of
                            IRIs, space separated (all space will be normalized). All the IRIs
                            included in this PI will be treated as synonyms for the same work, and
                            associated with the identifier (the first token after the name of the
                            PI).</para>
                    </listitem>
                    <listitem>
                        <para><code>akita-scriptum</code>: Lists possible IRI values for a single
                            scriptum. See the rules for <code>akita-work</code>.</para>
                    </listitem>
                    <listitem>
                        <para><code>akita-include</code>: This takes only one value, a relative or
                            absolute href to a separate Akita vocabulary file. That Akita vocabulary
                            file is defined by <link xlink:href="../schemas/akita-vocab.rnc"
                                >../schemas/akita-vocab.rnc</link>, which defines a simple structure
                            for organizing stand-off vocabularies of works and scripta. A recursive
                            inclusion feature allows Akita vocabulary to be organized modularly.
                            Those external files also support annotations, via
                                <code>&lt;desc></code>. Annotations are not supported in an Akita
                            PI.</para>
                    </listitem>
                </itemizedlist>In evaluating a TEI Akita file, the vocabulary is assembled from the
                local PIs and any associated akita vocabulary files. The process and results are
                defined by the function <code>akita:resolve-vocabulary()</code>, found in <link
                    xlink:href="../functions/akita-core.xsl">../functions/akita-core.xsl</link>. </para>
            <para>The vocabulary is checked for errors, defined by the function
                    <code>akita:validate-vocabulary()</code> in the same XSLT function
                library.</para>
            <para>The main schematron process, which validates a TEI Akita file, will report on any
                errors at the appropriate processing instruction.</para>
        </section>
        <section>
            <title>Subtree Declarations</title>
            <para>A TEI Akita file can be processed into one or more subtrees, defined by a
                particular conjunction of work, scriptum, and reference system. Subtrees are
                declared through PIs, to be placed wherever one likes, that define how to build a
                particular subtree, and what work, scriptum, and reference system defines that
                subtree. There are two types of subtree declarations.<itemizedlist>
                    <listitem>
                        <para><code>akita-mark-subtree-by-hierarchy</code>: points to one or more
                            elements in the TEI file that should be treated as the primary nodes for
                            a subtree corresponding to a particular conjunction of work, scriptum,
                            and reference system. In this PI are a series of values that look like
                            attribute-value pairs separated by equals signs. The following are permitted:<itemizedlist>
                                <listitem>
                                    <para><code>idrefs</code>: points by IDref to the TEI elements
                                        that are the topmost nodes in the target subtree.</para>
                                </listitem>
                                <listitem>
                                    <para><code>work</code>: points by IDref to a set of akita work
                                        vocabulary. The subtree corresponds to that work. No claim
                                        is made as to whether the work is complete or not.<remark>It
                                            might make sense to have some pseudoattribute allowing
                                            one to specify approximately how much of the work is
                                            present.</remark></para>
                                </listitem>
                                <listitem>
                                    <para><code>scriptum</code>: points by IDref to a set of akita
                                        scriptum vocabulary. By implication, the subtree comes from
                                        that scriptum, and no other.</para>
                                </listitem>
                                <listitem>
                                    <para><code>reference-system-type</code>: the allowed values,
                                            <code>material</code> or <code>logical</code>, indicate
                                        the type of reference system that is being used.</para>
                                </listitem>
                                <listitem>
                                    <para><code>reference-scriptum</code>: points by IDref to a set
                                        of akita scriptum vocabulary. The subtree follows the
                                        primary material or logical reference system from that
                                        scriptum.</para>
                                </listitem>
                            </itemizedlist></para>
                    </listitem>
                    <listitem>
                        <para><code>akita-mark-subtree-by-anchors</code>: points to sets of anchors
                            by <code>@type</code>, and orders them in a hierarchy. This declaration,
                            like the previous one, takes key-value pairs, and also permits
                                <code>work</code>, <code>scriptum</code>,
                                <code>reference-system-type</code>, and
                                <code>reference-scriptum</code>. It does not include
                                <code>idrefs</code>, which is replaced by the following:<itemizedlist>
                                <listitem>
                                    <para><code>level-1-type</code>, <code>level-2-type</code>,
                                        etc.: points to a <code>@type</code> value in a set of TEI
                                        anchors that constitute the reference system's first,
                                        second, etc. level.</para>
                                </listitem>
                            </itemizedlist></para>
                    </listitem>
                </itemizedlist></para>
                <para>In evaluating a TEI Akita file, each declaration is
                            parsed and assessed. Assessment requires analysis of the TEI file
                            itself, and the result is a series of versions of the TEI document, one
                            per declaration, along with associated errors. The process and results
                            are defined by the function <code>akita:build-tei-wf-map()</code> in
                                <link xlink:href="../functions/akita-core.xsl"
                                >../functions/akita-core.xsl</link>. </para>
                        <para>Handling milestones and anchors as a reference device requires turning
                the TEI file inside out, so to speak. That is, each system of anchors is converted
                into a subtree hierarchy, wrapping the intervening TEI tree fragments. In
                    <code>akita:build-tei-wf-map()</code> an anchor wraps as content all nodes that
                follows until another anchor at the same level is found.</para>
                        <para>A number of types of errors are checked, such as whether a material
                            reference system is being applied to a logical one or vice versa. See
                                <code>$akita:error-map</code>, defined in the core XSLT file, for
                            details.</para>
        </section>
        <section>
            <title>Extracting Content from TEI Akita Files</title>
            <para>Anyone designing a WF processor to extract content from a TEI Akita file should
                adopt the following process.<orderedlist>
                    <listitem>
                        <para>Validate the TEI Akita file. If it is not valid, the process may
                            end.</para>
                    </listitem>
                    <listitem>
                        <para>Build the TEI file's vocabulary through
                                <code>akita:resolve-vocabulary()</code> then perhaps
                                <code>akita:validate-vocabulary()</code>. You may wish to rewrite
                            these functions in the language of your choice.</para>
                    </listitem>
                    <listitem>
                        <para>Parse the input WF URI. Use the standard WF tools provided by
                                <code>wf-functions.xsl</code>, or suitable alternatives.</para>
                    </listitem>
                    <listitem>
                        <para>Check each component of the WF URI that is itself a URI against the
                            declared vocabulary, and convert each component to its id value. If
                            there are no vocabulary matches, the process may end.</para>
                    </listitem>
                    <listitem>
                        <para>Check the TEI file's Akita declarations to see if there is a region in
                            the file that corresponds to the parameters of the WF URI. If there is
                            none, the process may end. If there is a declaration of interest, note
                            its name and position relative to other processing instructions with the
                            same name.</para>
                    </listitem>
                    <listitem>
                        <para>Process the TEI file through <code>akita:build-tei-wf-map()</code>.
                            You may wish to rewrite this function in another language.</para>
                    </listitem>
                    <listitem>
                        <para>The map that is returned is keyed to anchor-based trees via keys
                            reflecting type and position in the TEI file "a1," "a2," etc. Those
                            based on hierarchies have keys "h1," "h2," etc. Fetch the map entry that
                            corresponds to the WF URI components. The output consists of TEI
                            fragments, framed within a unique ordered subtree provided with
                            number-based references. The steps in the subtree are marked with
                                <code>@akita:ref</code>, which provides a reference coordinate for
                            the element, using the WF URI syntax for references, e.g.,
                                <code>2:2.1:7</code>. </para>
                    </listitem>
                </orderedlist></para>
            <para>The process above will return zero or more TEI text nodes whose contents match the
                WF URI. At that point, extracting text based on an entire reference, or upon the
                text fragment of a WF URI, is left to the developers. Many TEI files are
                idiosyncratic in the way text is handled, and one can never know, entirely, what
                principles of normalization (especially space normalization) the creator has
                adopted, or if some text content is relevant to the text or if it has been mixed
                with other material.</para>
            <para>If the output text content is a subtree based on anchors, some extra decisions may
                need to be made before returning the output. Conversion of anchors to a subtree
                requires splitting and rebuilding content. Each content fragment retains a
                hierarchical structure that extends to the root element. If an anchor splits one or
                more ancestors, the new content fragment reflects the original opening tag exactly
                as inherited.</para>
        </section>
    </section>
</article>
